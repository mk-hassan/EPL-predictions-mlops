[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "EPL-Predictions"
version = "0.1.0"
description = "A production-grade MLOps project for predicting English Premier League (EPL) match outcomes using match statistics and xG data, featuring automated data ingestion, model training, continuous evaluation, and monitoring via the LGTM stack."
keywords = ["EPL", "football", "soccer", "machine learning", "MLOps", "xG", "match predictions"]
classifiers = [
    "Programming Language :: Python :: 311",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Sports",
    "Topic :: Software Development :: Version Control",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Build Tools"
]
authors = [
    { name = "Mahmoud Kamal", email = "mk.bayumi@gmail.com" }
]

readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
dependencies = [
    "mlflow==3.1.1",
    "jupyter==1.1.1",
    "scikit-learn==1.7.1",
    "pandas==2.3.1",
    "seaborn==0.13.2",
    "hyperopt==0.2.7",
    "xgboost==3.0.2",
    "fastparquet==2024.11.0",
    "boto3==1.39.9",
    "evidently==0.7.10",
    "psycopg==3.2.9",
    "psycopg[binary]==3.2.9",
    "psycopg2-binary==2.9.9",
    "requests==2.32.4",
    "sqlalchemy==2.0.41",
    "pydantic==2.11.7",
    "prefect[aws]==3.4.11",
    "catboost==1.2.8",
    "fastapi[standard]==0.116.1",
    "uvicorn==0.35.0",
]

[project.optional-dependencies]
dev = [
    "pylint==3.3.7",
    "ruff==0.12.4",
    "black==25.1.0",
    "isort==6.0.1",
    "pre-commit==4.2.0",
    "bandit==1.8.6",
    "commitizen==4.8.3",
    "pytest==8.4.1",
    "pytest-asyncio==1.1.0",
    "testcontainers[localstack,postgresql]",
]

## PYLINT
[tool.pylint]
ignore = ["build", "dist", "tests"]
extension-pkg-whitelist = ["numpy", "pandas"]

[tool.pylint.format]
max-line-length = 120


[tool.pylint.basic]
no-docstring-rgx = "__.*__|test[A-Z_].*|setUp|_decorator|_wrapper|_.*"

[tool.pylint.classes]
# This section configures Pylint to recognize certain methods as attribute-defining methods in classes
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "reset",
]

[tool.pylint.design]
max-args = 15
max-attributes = 40
max-bool-expr = 5
max-branches = 50
max-locals = 50
max-parents = 12
max-public-methods = 500
max-returns = 20
max-statements = 150
min-public-methods = 0
max-positional-arguments = 20
output-format = "colorized"

[tool.pylint."messages control"]
enable = [
    "useless-suppression",
]
disable = [
    "spelling",
    # Messages that are just silly:
    "locally-disabled",
    "exec-used",
    "global-statement",
    "broad-except",
    "no-else-return",
    "subprocess-run-check",
    "use-dict-literal",
    # Messages that may be silly:
    "no-member",
    "using-constant-test",
    "too-many-nested-blocks",
    "too-many-ancestors",
    "unnecessary-pass",
    "no-else-break",
    "no-else-continue",
    "redefined-outer-name",
    "unused-argument",
    "unused-variable",
    # Questionable things, but it's ok, I don't need to be told:
    "import-outside-toplevel",
    "self-assigning-variable",
    "consider-using-with",
    "missing-timeout",
    "too-many-lines",
    "use-implicit-booleaness-not-comparison",
    # Formatting stuff
    "superfluous-parens",
    "wrong-import-position",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "no-self-argument",
    # Messages that are noisy for now, eventually maybe we'll turn them on:
    "invalid-name",
    "protected-access",
    "unspecified-encoding",
    "consider-using-f-string",
    "duplicate-code",
    "cyclic-import",
    "wrong-import-order",
    "logging-fstring-interpolation",
    "ungrouped-imports"
]

[tool.pylint.reports]
score = false

[tool.pylint.variables]
dummy-variables-rgx = "_|unused|.*_unused"
ignored-argument-names = "_|unused|.*_unused"

[tool.ruff]
target-version = "py311"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests"
]

# Same as Black.
line-length = 120
indent-width = 4


[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn<'t enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "E", "F", "B", "I", "UP", "C90"]
ignore = [
    "W505", "I001"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.black]
# Use the same line length as Ruff.
line-length = 120
target-version = ["py311"]
skip-string-normalization = true


[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
length_sort = true
known_first_party = ["epl_predictions"]

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
version_scheme = "pep440"
tag_format = "v$version"
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true
annotated_tag = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]

[tool.bandit]
exclude_dirs = ["tests"]
